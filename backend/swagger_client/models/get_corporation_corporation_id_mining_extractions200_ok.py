# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationCorporationIdMiningExtractions200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chunk_arrival_time': 'datetime',
        'extraction_start_time': 'datetime',
        'moon_id': 'int',
        'natural_decay_time': 'datetime',
        'structure_id': 'int'
    }

    attribute_map = {
        'chunk_arrival_time': 'chunk_arrival_time',
        'extraction_start_time': 'extraction_start_time',
        'moon_id': 'moon_id',
        'natural_decay_time': 'natural_decay_time',
        'structure_id': 'structure_id'
    }

    def __init__(self, chunk_arrival_time=None, extraction_start_time=None, moon_id=None, natural_decay_time=None, structure_id=None, _configuration=None):  # noqa: E501
        """GetCorporationCorporationIdMiningExtractions200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chunk_arrival_time = None
        self._extraction_start_time = None
        self._moon_id = None
        self._natural_decay_time = None
        self._structure_id = None
        self.discriminator = None

        self.chunk_arrival_time = chunk_arrival_time
        self.extraction_start_time = extraction_start_time
        self.moon_id = moon_id
        self.natural_decay_time = natural_decay_time
        self.structure_id = structure_id

    @property
    def chunk_arrival_time(self):
        """Gets the chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501

        The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.   # noqa: E501

        :return: The chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._chunk_arrival_time

    @chunk_arrival_time.setter
    def chunk_arrival_time(self, chunk_arrival_time):
        """Sets the chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.   # noqa: E501

        :param chunk_arrival_time: The chunk_arrival_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and chunk_arrival_time is None:
            raise ValueError("Invalid value for `chunk_arrival_time`, must not be `None`")  # noqa: E501

        self._chunk_arrival_time = chunk_arrival_time

    @property
    def extraction_start_time(self):
        """Gets the extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501

        The time at which the current extraction was initiated.   # noqa: E501

        :return: The extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._extraction_start_time

    @extraction_start_time.setter
    def extraction_start_time(self, extraction_start_time):
        """Sets the extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the current extraction was initiated.   # noqa: E501

        :param extraction_start_time: The extraction_start_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and extraction_start_time is None:
            raise ValueError("Invalid value for `extraction_start_time`, must not be `None`")  # noqa: E501

        self._extraction_start_time = extraction_start_time

    @property
    def moon_id(self):
        """Gets the moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501

        moon_id integer  # noqa: E501

        :return: The moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :rtype: int
        """
        return self._moon_id

    @moon_id.setter
    def moon_id(self, moon_id):
        """Sets the moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        moon_id integer  # noqa: E501

        :param moon_id: The moon_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and moon_id is None:
            raise ValueError("Invalid value for `moon_id`, must not be `None`")  # noqa: E501

        self._moon_id = moon_id

    @property
    def natural_decay_time(self):
        """Gets the natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501

        The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.   # noqa: E501

        :return: The natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._natural_decay_time

    @natural_decay_time.setter
    def natural_decay_time(self, natural_decay_time):
        """Sets the natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.

        The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.   # noqa: E501

        :param natural_decay_time: The natural_decay_time of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and natural_decay_time is None:
            raise ValueError("Invalid value for `natural_decay_time`, must not be `None`")  # noqa: E501

        self._natural_decay_time = natural_decay_time

    @property
    def structure_id(self):
        """Gets the structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501

        structure_id integer  # noqa: E501

        :return: The structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.

        structure_id integer  # noqa: E501

        :param structure_id: The structure_id of this GetCorporationCorporationIdMiningExtractions200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")  # noqa: E501

        self._structure_id = structure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationCorporationIdMiningExtractions200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationCorporationIdMiningExtractions200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationCorporationIdMiningExtractions200Ok):
            return True

        return self.to_dict() != other.to_dict()
