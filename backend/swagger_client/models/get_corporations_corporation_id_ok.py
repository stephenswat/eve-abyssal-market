# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationsCorporationIdOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alliance_id': 'int',
        'ceo_id': 'int',
        'creator_id': 'int',
        'date_founded': 'datetime',
        'description': 'str',
        'faction_id': 'int',
        'home_station_id': 'int',
        'member_count': 'int',
        'name': 'str',
        'shares': 'int',
        'tax_rate': 'float',
        'ticker': 'str',
        'url': 'str',
        'war_eligible': 'bool'
    }

    attribute_map = {
        'alliance_id': 'alliance_id',
        'ceo_id': 'ceo_id',
        'creator_id': 'creator_id',
        'date_founded': 'date_founded',
        'description': 'description',
        'faction_id': 'faction_id',
        'home_station_id': 'home_station_id',
        'member_count': 'member_count',
        'name': 'name',
        'shares': 'shares',
        'tax_rate': 'tax_rate',
        'ticker': 'ticker',
        'url': 'url',
        'war_eligible': 'war_eligible'
    }

    def __init__(self, alliance_id=None, ceo_id=None, creator_id=None, date_founded=None, description=None, faction_id=None, home_station_id=None, member_count=None, name=None, shares=None, tax_rate=None, ticker=None, url=None, war_eligible=None, _configuration=None):  # noqa: E501
        """GetCorporationsCorporationIdOk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alliance_id = None
        self._ceo_id = None
        self._creator_id = None
        self._date_founded = None
        self._description = None
        self._faction_id = None
        self._home_station_id = None
        self._member_count = None
        self._name = None
        self._shares = None
        self._tax_rate = None
        self._ticker = None
        self._url = None
        self._war_eligible = None
        self.discriminator = None

        if alliance_id is not None:
            self.alliance_id = alliance_id
        self.ceo_id = ceo_id
        self.creator_id = creator_id
        if date_founded is not None:
            self.date_founded = date_founded
        if description is not None:
            self.description = description
        if faction_id is not None:
            self.faction_id = faction_id
        if home_station_id is not None:
            self.home_station_id = home_station_id
        self.member_count = member_count
        self.name = name
        if shares is not None:
            self.shares = shares
        self.tax_rate = tax_rate
        self.ticker = ticker
        if url is not None:
            self.url = url
        if war_eligible is not None:
            self.war_eligible = war_eligible

    @property
    def alliance_id(self):
        """Gets the alliance_id of this GetCorporationsCorporationIdOk.  # noqa: E501

        ID of the alliance that corporation is a member of, if any  # noqa: E501

        :return: The alliance_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._alliance_id

    @alliance_id.setter
    def alliance_id(self, alliance_id):
        """Sets the alliance_id of this GetCorporationsCorporationIdOk.

        ID of the alliance that corporation is a member of, if any  # noqa: E501

        :param alliance_id: The alliance_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """

        self._alliance_id = alliance_id

    @property
    def ceo_id(self):
        """Gets the ceo_id of this GetCorporationsCorporationIdOk.  # noqa: E501

        ceo_id integer  # noqa: E501

        :return: The ceo_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._ceo_id

    @ceo_id.setter
    def ceo_id(self, ceo_id):
        """Sets the ceo_id of this GetCorporationsCorporationIdOk.

        ceo_id integer  # noqa: E501

        :param ceo_id: The ceo_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ceo_id is None:
            raise ValueError("Invalid value for `ceo_id`, must not be `None`")  # noqa: E501

        self._ceo_id = ceo_id

    @property
    def creator_id(self):
        """Gets the creator_id of this GetCorporationsCorporationIdOk.  # noqa: E501

        creator_id integer  # noqa: E501

        :return: The creator_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this GetCorporationsCorporationIdOk.

        creator_id integer  # noqa: E501

        :param creator_id: The creator_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def date_founded(self):
        """Gets the date_founded of this GetCorporationsCorporationIdOk.  # noqa: E501

        date_founded string  # noqa: E501

        :return: The date_founded of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: datetime
        """
        return self._date_founded

    @date_founded.setter
    def date_founded(self, date_founded):
        """Sets the date_founded of this GetCorporationsCorporationIdOk.

        date_founded string  # noqa: E501

        :param date_founded: The date_founded of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: datetime
        """

        self._date_founded = date_founded

    @property
    def description(self):
        """Gets the description of this GetCorporationsCorporationIdOk.  # noqa: E501

        description string  # noqa: E501

        :return: The description of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCorporationsCorporationIdOk.

        description string  # noqa: E501

        :param description: The description of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def faction_id(self):
        """Gets the faction_id of this GetCorporationsCorporationIdOk.  # noqa: E501

        faction_id integer  # noqa: E501

        :return: The faction_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this GetCorporationsCorporationIdOk.

        faction_id integer  # noqa: E501

        :param faction_id: The faction_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """

        self._faction_id = faction_id

    @property
    def home_station_id(self):
        """Gets the home_station_id of this GetCorporationsCorporationIdOk.  # noqa: E501

        home_station_id integer  # noqa: E501

        :return: The home_station_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._home_station_id

    @home_station_id.setter
    def home_station_id(self, home_station_id):
        """Sets the home_station_id of this GetCorporationsCorporationIdOk.

        home_station_id integer  # noqa: E501

        :param home_station_id: The home_station_id of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """

        self._home_station_id = home_station_id

    @property
    def member_count(self):
        """Gets the member_count of this GetCorporationsCorporationIdOk.  # noqa: E501

        member_count integer  # noqa: E501

        :return: The member_count of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this GetCorporationsCorporationIdOk.

        member_count integer  # noqa: E501

        :param member_count: The member_count of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and member_count is None:
            raise ValueError("Invalid value for `member_count`, must not be `None`")  # noqa: E501

        self._member_count = member_count

    @property
    def name(self):
        """Gets the name of this GetCorporationsCorporationIdOk.  # noqa: E501

        the full name of the corporation  # noqa: E501

        :return: The name of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCorporationsCorporationIdOk.

        the full name of the corporation  # noqa: E501

        :param name: The name of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def shares(self):
        """Gets the shares of this GetCorporationsCorporationIdOk.  # noqa: E501

        shares integer  # noqa: E501

        :return: The shares of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this GetCorporationsCorporationIdOk.

        shares integer  # noqa: E501

        :param shares: The shares of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: int
        """

        self._shares = shares

    @property
    def tax_rate(self):
        """Gets the tax_rate of this GetCorporationsCorporationIdOk.  # noqa: E501

        tax_rate number  # noqa: E501

        :return: The tax_rate of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this GetCorporationsCorporationIdOk.

        tax_rate number  # noqa: E501

        :param tax_rate: The tax_rate of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_rate is not None and tax_rate > 1):  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value less than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_rate is not None and tax_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tax_rate = tax_rate

    @property
    def ticker(self):
        """Gets the ticker of this GetCorporationsCorporationIdOk.  # noqa: E501

        the short name of the corporation  # noqa: E501

        :return: The ticker of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this GetCorporationsCorporationIdOk.

        the short name of the corporation  # noqa: E501

        :param ticker: The ticker of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def url(self):
        """Gets the url of this GetCorporationsCorporationIdOk.  # noqa: E501

        url string  # noqa: E501

        :return: The url of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetCorporationsCorporationIdOk.

        url string  # noqa: E501

        :param url: The url of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def war_eligible(self):
        """Gets the war_eligible of this GetCorporationsCorporationIdOk.  # noqa: E501

        war_eligible boolean  # noqa: E501

        :return: The war_eligible of this GetCorporationsCorporationIdOk.  # noqa: E501
        :rtype: bool
        """
        return self._war_eligible

    @war_eligible.setter
    def war_eligible(self, war_eligible):
        """Sets the war_eligible of this GetCorporationsCorporationIdOk.

        war_eligible boolean  # noqa: E501

        :param war_eligible: The war_eligible of this GetCorporationsCorporationIdOk.  # noqa: E501
        :type: bool
        """

        self._war_eligible = war_eligible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationsCorporationIdOk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdOk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationsCorporationIdOk):
            return True

        return self.to_dict() != other.to_dict()
