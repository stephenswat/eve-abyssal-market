# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationsCorporationIdBlueprints200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'location_flag': 'str',
        'location_id': 'int',
        'material_efficiency': 'int',
        'quantity': 'int',
        'runs': 'int',
        'time_efficiency': 'int',
        'type_id': 'int'
    }

    attribute_map = {
        'item_id': 'item_id',
        'location_flag': 'location_flag',
        'location_id': 'location_id',
        'material_efficiency': 'material_efficiency',
        'quantity': 'quantity',
        'runs': 'runs',
        'time_efficiency': 'time_efficiency',
        'type_id': 'type_id'
    }

    def __init__(self, item_id=None, location_flag=None, location_id=None, material_efficiency=None, quantity=None, runs=None, time_efficiency=None, type_id=None, _configuration=None):  # noqa: E501
        """GetCorporationsCorporationIdBlueprints200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_id = None
        self._location_flag = None
        self._location_id = None
        self._material_efficiency = None
        self._quantity = None
        self._runs = None
        self._time_efficiency = None
        self._type_id = None
        self.discriminator = None

        self.item_id = item_id
        self.location_flag = location_flag
        self.location_id = location_id
        self.material_efficiency = material_efficiency
        self.quantity = quantity
        self.runs = runs
        self.time_efficiency = time_efficiency
        self.type_id = type_id

    @property
    def item_id(self):
        """Gets the item_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        Unique ID for this item.  # noqa: E501

        :return: The item_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetCorporationsCorporationIdBlueprints200Ok.

        Unique ID for this item.  # noqa: E501

        :param item_id: The item_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def location_flag(self):
        """Gets the location_flag of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        Type of the location_id  # noqa: E501

        :return: The location_flag of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: str
        """
        return self._location_flag

    @location_flag.setter
    def location_flag(self, location_flag):
        """Sets the location_flag of this GetCorporationsCorporationIdBlueprints200Ok.

        Type of the location_id  # noqa: E501

        :param location_flag: The location_flag of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and location_flag is None:
            raise ValueError("Invalid value for `location_flag`, must not be `None`")  # noqa: E501
        allowed_values = ["AssetSafety", "AutoFit", "Bonus", "Booster", "BoosterBay", "Capsule", "Cargo", "CorpDeliveries", "CorpSAG1", "CorpSAG2", "CorpSAG3", "CorpSAG4", "CorpSAG5", "CorpSAG6", "CorpSAG7", "CrateLoot", "Deliveries", "DroneBay", "DustBattle", "DustDatabank", "FighterBay", "FighterTube0", "FighterTube1", "FighterTube2", "FighterTube3", "FighterTube4", "FleetHangar", "FrigateEscapeBay", "Hangar", "HangarAll", "HiSlot0", "HiSlot1", "HiSlot2", "HiSlot3", "HiSlot4", "HiSlot5", "HiSlot6", "HiSlot7", "HiddenModifiers", "Implant", "Impounded", "JunkyardReprocessed", "JunkyardTrashed", "LoSlot0", "LoSlot1", "LoSlot2", "LoSlot3", "LoSlot4", "LoSlot5", "LoSlot6", "LoSlot7", "Locked", "MedSlot0", "MedSlot1", "MedSlot2", "MedSlot3", "MedSlot4", "MedSlot5", "MedSlot6", "MedSlot7", "OfficeFolder", "Pilot", "PlanetSurface", "QuafeBay", "QuantumCoreRoom", "Reward", "RigSlot0", "RigSlot1", "RigSlot2", "RigSlot3", "RigSlot4", "RigSlot5", "RigSlot6", "RigSlot7", "SecondaryStorage", "ServiceSlot0", "ServiceSlot1", "ServiceSlot2", "ServiceSlot3", "ServiceSlot4", "ServiceSlot5", "ServiceSlot6", "ServiceSlot7", "ShipHangar", "ShipOffline", "Skill", "SkillInTraining", "SpecializedAmmoHold", "SpecializedCommandCenterHold", "SpecializedFuelBay", "SpecializedGasHold", "SpecializedIndustrialShipHold", "SpecializedLargeShipHold", "SpecializedMaterialBay", "SpecializedMediumShipHold", "SpecializedMineralHold", "SpecializedOreHold", "SpecializedPlanetaryCommoditiesHold", "SpecializedSalvageHold", "SpecializedShipHold", "SpecializedSmallShipHold", "StructureActive", "StructureFuel", "StructureInactive", "StructureOffline", "SubSystemBay", "SubSystemSlot0", "SubSystemSlot1", "SubSystemSlot2", "SubSystemSlot3", "SubSystemSlot4", "SubSystemSlot5", "SubSystemSlot6", "SubSystemSlot7", "Unlocked", "Wallet", "Wardrobe"]  # noqa: E501
        if (self._configuration.client_side_validation and
                location_flag not in allowed_values):
            raise ValueError(
                "Invalid value for `location_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(location_flag, allowed_values)
            )

        self._location_flag = location_flag

    @property
    def location_id(self):
        """Gets the location_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        References a station, a ship or an item_id if this blueprint is located within a container.  # noqa: E501

        :return: The location_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCorporationsCorporationIdBlueprints200Ok.

        References a station, a ship or an item_id if this blueprint is located within a container.  # noqa: E501

        :param location_id: The location_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def material_efficiency(self):
        """Gets the material_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        Material Efficiency Level of the blueprint.  # noqa: E501

        :return: The material_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._material_efficiency

    @material_efficiency.setter
    def material_efficiency(self, material_efficiency):
        """Sets the material_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.

        Material Efficiency Level of the blueprint.  # noqa: E501

        :param material_efficiency: The material_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and material_efficiency is None:
            raise ValueError("Invalid value for `material_efficiency`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                material_efficiency is not None and material_efficiency > 25):  # noqa: E501
            raise ValueError("Invalid value for `material_efficiency`, must be a value less than or equal to `25`")  # noqa: E501
        if (self._configuration.client_side_validation and
                material_efficiency is not None and material_efficiency < 0):  # noqa: E501
            raise ValueError("Invalid value for `material_efficiency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._material_efficiency = material_efficiency

    @property
    def quantity(self):
        """Gets the quantity of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).  # noqa: E501

        :return: The quantity of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetCorporationsCorporationIdBlueprints200Ok.

        A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).  # noqa: E501

        :param quantity: The quantity of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                quantity is not None and quantity < -2):  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `-2`")  # noqa: E501

        self._quantity = quantity

    @property
    def runs(self):
        """Gets the runs of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        Number of runs remaining if the blueprint is a copy, -1 if it is an original.  # noqa: E501

        :return: The runs of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this GetCorporationsCorporationIdBlueprints200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original.  # noqa: E501

        :param runs: The runs of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and runs is None:
            raise ValueError("Invalid value for `runs`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                runs is not None and runs < -1):  # noqa: E501
            raise ValueError("Invalid value for `runs`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._runs = runs

    @property
    def time_efficiency(self):
        """Gets the time_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        Time Efficiency Level of the blueprint.  # noqa: E501

        :return: The time_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._time_efficiency

    @time_efficiency.setter
    def time_efficiency(self, time_efficiency):
        """Sets the time_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.

        Time Efficiency Level of the blueprint.  # noqa: E501

        :param time_efficiency: The time_efficiency of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and time_efficiency is None:
            raise ValueError("Invalid value for `time_efficiency`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_efficiency is not None and time_efficiency > 20):  # noqa: E501
            raise ValueError("Invalid value for `time_efficiency`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_efficiency is not None and time_efficiency < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_efficiency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_efficiency = time_efficiency

    @property
    def type_id(self):
        """Gets the type_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501

        type_id integer  # noqa: E501

        :return: The type_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetCorporationsCorporationIdBlueprints200Ok.

        type_id integer  # noqa: E501

        :param type_id: The type_id of this GetCorporationsCorporationIdBlueprints200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationsCorporationIdBlueprints200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdBlueprints200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationsCorporationIdBlueprints200Ok):
            return True

        return self.to_dict() != other.to_dict()
