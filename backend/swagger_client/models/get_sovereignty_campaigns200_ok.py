# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetSovereigntyCampaigns200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attackers_score': 'float',
        'campaign_id': 'int',
        'constellation_id': 'int',
        'defender_id': 'int',
        'defender_score': 'float',
        'event_type': 'str',
        'participants': 'list[GetSovereigntyCampaignsParticipant]',
        'solar_system_id': 'int',
        'start_time': 'datetime',
        'structure_id': 'int'
    }

    attribute_map = {
        'attackers_score': 'attackers_score',
        'campaign_id': 'campaign_id',
        'constellation_id': 'constellation_id',
        'defender_id': 'defender_id',
        'defender_score': 'defender_score',
        'event_type': 'event_type',
        'participants': 'participants',
        'solar_system_id': 'solar_system_id',
        'start_time': 'start_time',
        'structure_id': 'structure_id'
    }

    def __init__(self, attackers_score=None, campaign_id=None, constellation_id=None, defender_id=None, defender_score=None, event_type=None, participants=None, solar_system_id=None, start_time=None, structure_id=None, _configuration=None):  # noqa: E501
        """GetSovereigntyCampaigns200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attackers_score = None
        self._campaign_id = None
        self._constellation_id = None
        self._defender_id = None
        self._defender_score = None
        self._event_type = None
        self._participants = None
        self._solar_system_id = None
        self._start_time = None
        self._structure_id = None
        self.discriminator = None

        if attackers_score is not None:
            self.attackers_score = attackers_score
        self.campaign_id = campaign_id
        self.constellation_id = constellation_id
        if defender_id is not None:
            self.defender_id = defender_id
        if defender_score is not None:
            self.defender_score = defender_score
        self.event_type = event_type
        if participants is not None:
            self.participants = participants
        self.solar_system_id = solar_system_id
        self.start_time = start_time
        self.structure_id = structure_id

    @property
    def attackers_score(self):
        """Gets the attackers_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Score for all attacking parties, only present in Defense Events.   # noqa: E501

        :return: The attackers_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: float
        """
        return self._attackers_score

    @attackers_score.setter
    def attackers_score(self, attackers_score):
        """Sets the attackers_score of this GetSovereigntyCampaigns200Ok.

        Score for all attacking parties, only present in Defense Events.   # noqa: E501

        :param attackers_score: The attackers_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: float
        """

        self._attackers_score = attackers_score

    @property
    def campaign_id(self):
        """Gets the campaign_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Unique ID for this campaign.  # noqa: E501

        :return: The campaign_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this GetSovereigntyCampaigns200Ok.

        Unique ID for this campaign.  # noqa: E501

        :param campaign_id: The campaign_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def constellation_id(self):
        """Gets the constellation_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        The constellation in which the campaign will take place.   # noqa: E501

        :return: The constellation_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: int
        """
        return self._constellation_id

    @constellation_id.setter
    def constellation_id(self, constellation_id):
        """Sets the constellation_id of this GetSovereigntyCampaigns200Ok.

        The constellation in which the campaign will take place.   # noqa: E501

        :param constellation_id: The constellation_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and constellation_id is None:
            raise ValueError("Invalid value for `constellation_id`, must not be `None`")  # noqa: E501

        self._constellation_id = constellation_id

    @property
    def defender_id(self):
        """Gets the defender_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Defending alliance, only present in Defense Events   # noqa: E501

        :return: The defender_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: int
        """
        return self._defender_id

    @defender_id.setter
    def defender_id(self, defender_id):
        """Sets the defender_id of this GetSovereigntyCampaigns200Ok.

        Defending alliance, only present in Defense Events   # noqa: E501

        :param defender_id: The defender_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: int
        """

        self._defender_id = defender_id

    @property
    def defender_score(self):
        """Gets the defender_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Score for the defending alliance, only present in Defense Events.   # noqa: E501

        :return: The defender_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: float
        """
        return self._defender_score

    @defender_score.setter
    def defender_score(self, defender_score):
        """Sets the defender_score of this GetSovereigntyCampaigns200Ok.

        Score for the defending alliance, only present in Defense Events.   # noqa: E501

        :param defender_score: The defender_score of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: float
        """

        self._defender_score = defender_score

    @property
    def event_type(self):
        """Gets the event_type of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\".   # noqa: E501

        :return: The event_type of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GetSovereigntyCampaigns200Ok.

        Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\".   # noqa: E501

        :param event_type: The event_type of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["tcu_defense", "ihub_defense", "station_defense", "station_freeport"]  # noqa: E501
        if (self._configuration.client_side_validation and
                event_type not in allowed_values):
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def participants(self):
        """Gets the participants of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Alliance participating and their respective scores, only present in Freeport Events.   # noqa: E501

        :return: The participants of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: list[GetSovereigntyCampaignsParticipant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this GetSovereigntyCampaigns200Ok.

        Alliance participating and their respective scores, only present in Freeport Events.   # noqa: E501

        :param participants: The participants of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: list[GetSovereigntyCampaignsParticipant]
        """

        self._participants = participants

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        The solar system the structure is located in.   # noqa: E501

        :return: The solar_system_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetSovereigntyCampaigns200Ok.

        The solar system the structure is located in.   # noqa: E501

        :param solar_system_id: The solar_system_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")  # noqa: E501

        self._solar_system_id = solar_system_id

    @property
    def start_time(self):
        """Gets the start_time of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        Time the event is scheduled to start.   # noqa: E501

        :return: The start_time of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetSovereigntyCampaigns200Ok.

        Time the event is scheduled to start.   # noqa: E501

        :param start_time: The start_time of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def structure_id(self):
        """Gets the structure_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501

        The structure item ID that is related to this campaign.   # noqa: E501

        :return: The structure_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetSovereigntyCampaigns200Ok.

        The structure item ID that is related to this campaign.   # noqa: E501

        :param structure_id: The structure_id of this GetSovereigntyCampaigns200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and structure_id is None:
            raise ValueError("Invalid value for `structure_id`, must not be `None`")  # noqa: E501

        self._structure_id = structure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSovereigntyCampaigns200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSovereigntyCampaigns200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSovereigntyCampaigns200Ok):
            return True

        return self.to_dict() != other.to_dict()
