# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetUniverseAncestries200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bloodline_id': 'int',
        'description': 'str',
        'icon_id': 'int',
        'id': 'int',
        'name': 'str',
        'short_description': 'str'
    }

    attribute_map = {
        'bloodline_id': 'bloodline_id',
        'description': 'description',
        'icon_id': 'icon_id',
        'id': 'id',
        'name': 'name',
        'short_description': 'short_description'
    }

    def __init__(self, bloodline_id=None, description=None, icon_id=None, id=None, name=None, short_description=None, _configuration=None):  # noqa: E501
        """GetUniverseAncestries200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bloodline_id = None
        self._description = None
        self._icon_id = None
        self._id = None
        self._name = None
        self._short_description = None
        self.discriminator = None

        self.bloodline_id = bloodline_id
        self.description = description
        if icon_id is not None:
            self.icon_id = icon_id
        self.id = id
        self.name = name
        if short_description is not None:
            self.short_description = short_description

    @property
    def bloodline_id(self):
        """Gets the bloodline_id of this GetUniverseAncestries200Ok.  # noqa: E501

        The bloodline associated with this ancestry  # noqa: E501

        :return: The bloodline_id of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: int
        """
        return self._bloodline_id

    @bloodline_id.setter
    def bloodline_id(self, bloodline_id):
        """Sets the bloodline_id of this GetUniverseAncestries200Ok.

        The bloodline associated with this ancestry  # noqa: E501

        :param bloodline_id: The bloodline_id of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and bloodline_id is None:
            raise ValueError("Invalid value for `bloodline_id`, must not be `None`")  # noqa: E501

        self._bloodline_id = bloodline_id

    @property
    def description(self):
        """Gets the description of this GetUniverseAncestries200Ok.  # noqa: E501

        description string  # noqa: E501

        :return: The description of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseAncestries200Ok.

        description string  # noqa: E501

        :param description: The description of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def icon_id(self):
        """Gets the icon_id of this GetUniverseAncestries200Ok.  # noqa: E501

        icon_id integer  # noqa: E501

        :return: The icon_id of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this GetUniverseAncestries200Ok.

        icon_id integer  # noqa: E501

        :param icon_id: The icon_id of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: int
        """

        self._icon_id = icon_id

    @property
    def id(self):
        """Gets the id of this GetUniverseAncestries200Ok.  # noqa: E501

        id integer  # noqa: E501

        :return: The id of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetUniverseAncestries200Ok.

        id integer  # noqa: E501

        :param id: The id of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetUniverseAncestries200Ok.  # noqa: E501

        name string  # noqa: E501

        :return: The name of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseAncestries200Ok.

        name string  # noqa: E501

        :param name: The name of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this GetUniverseAncestries200Ok.  # noqa: E501

        short_description string  # noqa: E501

        :return: The short_description of this GetUniverseAncestries200Ok.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this GetUniverseAncestries200Ok.

        short_description string  # noqa: E501

        :param short_description: The short_description of this GetUniverseAncestries200Ok.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetUniverseAncestries200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUniverseAncestries200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUniverseAncestries200Ok):
            return True

        return self.to_dict() != other.to_dict()
