# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCharactersCharacterIdFleetOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fleet_id': 'int',
        'role': 'str',
        'squad_id': 'int',
        'wing_id': 'int'
    }

    attribute_map = {
        'fleet_id': 'fleet_id',
        'role': 'role',
        'squad_id': 'squad_id',
        'wing_id': 'wing_id'
    }

    def __init__(self, fleet_id=None, role=None, squad_id=None, wing_id=None, _configuration=None):  # noqa: E501
        """GetCharactersCharacterIdFleetOk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fleet_id = None
        self._role = None
        self._squad_id = None
        self._wing_id = None
        self.discriminator = None

        self.fleet_id = fleet_id
        self.role = role
        self.squad_id = squad_id
        self.wing_id = wing_id

    @property
    def fleet_id(self):
        """Gets the fleet_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501

        The character's current fleet ID  # noqa: E501

        :return: The fleet_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :rtype: int
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this GetCharactersCharacterIdFleetOk.

        The character's current fleet ID  # noqa: E501

        :param fleet_id: The fleet_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and fleet_id is None:
            raise ValueError("Invalid value for `fleet_id`, must not be `None`")  # noqa: E501

        self._fleet_id = fleet_id

    @property
    def role(self):
        """Gets the role of this GetCharactersCharacterIdFleetOk.  # noqa: E501

        Member’s role in fleet  # noqa: E501

        :return: The role of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GetCharactersCharacterIdFleetOk.

        Member’s role in fleet  # noqa: E501

        :param role: The role of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["fleet_commander", "squad_commander", "squad_member", "wing_commander"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def squad_id(self):
        """Gets the squad_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501

        ID of the squad the member is in. If not applicable, will be set to -1  # noqa: E501

        :return: The squad_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :rtype: int
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this GetCharactersCharacterIdFleetOk.

        ID of the squad the member is in. If not applicable, will be set to -1  # noqa: E501

        :param squad_id: The squad_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and squad_id is None:
            raise ValueError("Invalid value for `squad_id`, must not be `None`")  # noqa: E501

        self._squad_id = squad_id

    @property
    def wing_id(self):
        """Gets the wing_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501

        ID of the wing the member is in. If not applicable, will be set to -1  # noqa: E501

        :return: The wing_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :rtype: int
        """
        return self._wing_id

    @wing_id.setter
    def wing_id(self, wing_id):
        """Sets the wing_id of this GetCharactersCharacterIdFleetOk.

        ID of the wing the member is in. If not applicable, will be set to -1  # noqa: E501

        :param wing_id: The wing_id of this GetCharactersCharacterIdFleetOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and wing_id is None:
            raise ValueError("Invalid value for `wing_id`, must not be `None`")  # noqa: E501

        self._wing_id = wing_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCharactersCharacterIdFleetOk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdFleetOk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCharactersCharacterIdFleetOk):
            return True

        return self.to_dict() != other.to_dict()
