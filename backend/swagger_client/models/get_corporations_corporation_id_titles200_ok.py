# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationsCorporationIdTitles200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grantable_roles': 'list[str]',
        'grantable_roles_at_base': 'list[str]',
        'grantable_roles_at_hq': 'list[str]',
        'grantable_roles_at_other': 'list[str]',
        'name': 'str',
        'roles': 'list[str]',
        'roles_at_base': 'list[str]',
        'roles_at_hq': 'list[str]',
        'roles_at_other': 'list[str]',
        'title_id': 'int'
    }

    attribute_map = {
        'grantable_roles': 'grantable_roles',
        'grantable_roles_at_base': 'grantable_roles_at_base',
        'grantable_roles_at_hq': 'grantable_roles_at_hq',
        'grantable_roles_at_other': 'grantable_roles_at_other',
        'name': 'name',
        'roles': 'roles',
        'roles_at_base': 'roles_at_base',
        'roles_at_hq': 'roles_at_hq',
        'roles_at_other': 'roles_at_other',
        'title_id': 'title_id'
    }

    def __init__(self, grantable_roles=None, grantable_roles_at_base=None, grantable_roles_at_hq=None, grantable_roles_at_other=None, name=None, roles=None, roles_at_base=None, roles_at_hq=None, roles_at_other=None, title_id=None, _configuration=None):  # noqa: E501
        """GetCorporationsCorporationIdTitles200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._grantable_roles = None
        self._grantable_roles_at_base = None
        self._grantable_roles_at_hq = None
        self._grantable_roles_at_other = None
        self._name = None
        self._roles = None
        self._roles_at_base = None
        self._roles_at_hq = None
        self._roles_at_other = None
        self._title_id = None
        self.discriminator = None

        if grantable_roles is not None:
            self.grantable_roles = grantable_roles
        if grantable_roles_at_base is not None:
            self.grantable_roles_at_base = grantable_roles_at_base
        if grantable_roles_at_hq is not None:
            self.grantable_roles_at_hq = grantable_roles_at_hq
        if grantable_roles_at_other is not None:
            self.grantable_roles_at_other = grantable_roles_at_other
        if name is not None:
            self.name = name
        if roles is not None:
            self.roles = roles
        if roles_at_base is not None:
            self.roles_at_base = roles_at_base
        if roles_at_hq is not None:
            self.roles_at_hq = roles_at_hq
        if roles_at_other is not None:
            self.roles_at_other = roles_at_other
        if title_id is not None:
            self.title_id = title_id

    @property
    def grantable_roles(self):
        """Gets the grantable_roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        grantable_roles array  # noqa: E501

        :return: The grantable_roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._grantable_roles

    @grantable_roles.setter
    def grantable_roles(self, grantable_roles):
        """Sets the grantable_roles of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles array  # noqa: E501

        :param grantable_roles: The grantable_roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(grantable_roles).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `grantable_roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grantable_roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles = grantable_roles

    @property
    def grantable_roles_at_base(self):
        """Gets the grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        grantable_roles_at_base array  # noqa: E501

        :return: The grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._grantable_roles_at_base

    @grantable_roles_at_base.setter
    def grantable_roles_at_base(self, grantable_roles_at_base):
        """Sets the grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_base array  # noqa: E501

        :param grantable_roles_at_base: The grantable_roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(grantable_roles_at_base).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `grantable_roles_at_base` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grantable_roles_at_base) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_base = grantable_roles_at_base

    @property
    def grantable_roles_at_hq(self):
        """Gets the grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        grantable_roles_at_hq array  # noqa: E501

        :return: The grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._grantable_roles_at_hq

    @grantable_roles_at_hq.setter
    def grantable_roles_at_hq(self, grantable_roles_at_hq):
        """Sets the grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_hq array  # noqa: E501

        :param grantable_roles_at_hq: The grantable_roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(grantable_roles_at_hq).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `grantable_roles_at_hq` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grantable_roles_at_hq) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_hq = grantable_roles_at_hq

    @property
    def grantable_roles_at_other(self):
        """Gets the grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        grantable_roles_at_other array  # noqa: E501

        :return: The grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._grantable_roles_at_other

    @grantable_roles_at_other.setter
    def grantable_roles_at_other(self, grantable_roles_at_other):
        """Sets the grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        grantable_roles_at_other array  # noqa: E501

        :param grantable_roles_at_other: The grantable_roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(grantable_roles_at_other).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `grantable_roles_at_other` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grantable_roles_at_other) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grantable_roles_at_other = grantable_roles_at_other

    @property
    def name(self):
        """Gets the name of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        name string  # noqa: E501

        :return: The name of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCorporationsCorporationIdTitles200Ok.

        name string  # noqa: E501

        :param name: The name of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        roles array  # noqa: E501

        :return: The roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GetCorporationsCorporationIdTitles200Ok.

        roles array  # noqa: E501

        :param roles: The roles of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(roles).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def roles_at_base(self):
        """Gets the roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        roles_at_base array  # noqa: E501

        :return: The roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_at_base

    @roles_at_base.setter
    def roles_at_base(self, roles_at_base):
        """Sets the roles_at_base of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_base array  # noqa: E501

        :param roles_at_base: The roles_at_base of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(roles_at_base).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `roles_at_base` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles_at_base) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_base = roles_at_base

    @property
    def roles_at_hq(self):
        """Gets the roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        roles_at_hq array  # noqa: E501

        :return: The roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_at_hq

    @roles_at_hq.setter
    def roles_at_hq(self, roles_at_hq):
        """Sets the roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_hq array  # noqa: E501

        :param roles_at_hq: The roles_at_hq of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(roles_at_hq).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `roles_at_hq` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles_at_hq) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_hq = roles_at_hq

    @property
    def roles_at_other(self):
        """Gets the roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        roles_at_other array  # noqa: E501

        :return: The roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles_at_other

    @roles_at_other.setter
    def roles_at_other(self, roles_at_other):
        """Sets the roles_at_other of this GetCorporationsCorporationIdTitles200Ok.

        roles_at_other array  # noqa: E501

        :param roles_at_other: The roles_at_other of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Account_Take_1", "Account_Take_2", "Account_Take_3", "Account_Take_4", "Account_Take_5", "Account_Take_6", "Account_Take_7", "Accountant", "Auditor", "Communications_Officer", "Config_Equipment", "Config_Starbase_Equipment", "Container_Take_1", "Container_Take_2", "Container_Take_3", "Container_Take_4", "Container_Take_5", "Container_Take_6", "Container_Take_7", "Contract_Manager", "Diplomat", "Director", "Factory_Manager", "Fitting_Manager", "Hangar_Query_1", "Hangar_Query_2", "Hangar_Query_3", "Hangar_Query_4", "Hangar_Query_5", "Hangar_Query_6", "Hangar_Query_7", "Hangar_Take_1", "Hangar_Take_2", "Hangar_Take_3", "Hangar_Take_4", "Hangar_Take_5", "Hangar_Take_6", "Hangar_Take_7", "Junior_Accountant", "Personnel_Manager", "Rent_Factory_Facility", "Rent_Office", "Rent_Research_Facility", "Security_Officer", "Skill_Plan_Manager", "Starbase_Defense_Operator", "Starbase_Fuel_Technician", "Station_Manager", "Trader"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(roles_at_other).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `roles_at_other` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles_at_other) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles_at_other = roles_at_other

    @property
    def title_id(self):
        """Gets the title_id of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501

        title_id integer  # noqa: E501

        :return: The title_id of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :rtype: int
        """
        return self._title_id

    @title_id.setter
    def title_id(self, title_id):
        """Sets the title_id of this GetCorporationsCorporationIdTitles200Ok.

        title_id integer  # noqa: E501

        :param title_id: The title_id of this GetCorporationsCorporationIdTitles200Ok.  # noqa: E501
        :type: int
        """

        self._title_id = title_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationsCorporationIdTitles200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdTitles200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationsCorporationIdTitles200Ok):
            return True

        return self.to_dict() != other.to_dict()
