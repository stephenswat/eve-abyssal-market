# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetUniverseSystemsSystemIdPlanet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asteroid_belts': 'list[int]',
        'moons': 'list[int]',
        'planet_id': 'int'
    }

    attribute_map = {
        'asteroid_belts': 'asteroid_belts',
        'moons': 'moons',
        'planet_id': 'planet_id'
    }

    def __init__(self, asteroid_belts=None, moons=None, planet_id=None, _configuration=None):  # noqa: E501
        """GetUniverseSystemsSystemIdPlanet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asteroid_belts = None
        self._moons = None
        self._planet_id = None
        self.discriminator = None

        if asteroid_belts is not None:
            self.asteroid_belts = asteroid_belts
        if moons is not None:
            self.moons = moons
        self.planet_id = planet_id

    @property
    def asteroid_belts(self):
        """Gets the asteroid_belts of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501

        asteroid_belts array  # noqa: E501

        :return: The asteroid_belts of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :rtype: list[int]
        """
        return self._asteroid_belts

    @asteroid_belts.setter
    def asteroid_belts(self, asteroid_belts):
        """Sets the asteroid_belts of this GetUniverseSystemsSystemIdPlanet.

        asteroid_belts array  # noqa: E501

        :param asteroid_belts: The asteroid_belts of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :type: list[int]
        """

        self._asteroid_belts = asteroid_belts

    @property
    def moons(self):
        """Gets the moons of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501

        moons array  # noqa: E501

        :return: The moons of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :rtype: list[int]
        """
        return self._moons

    @moons.setter
    def moons(self, moons):
        """Sets the moons of this GetUniverseSystemsSystemIdPlanet.

        moons array  # noqa: E501

        :param moons: The moons of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :type: list[int]
        """

        self._moons = moons

    @property
    def planet_id(self):
        """Gets the planet_id of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501

        planet_id integer  # noqa: E501

        :return: The planet_id of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this GetUniverseSystemsSystemIdPlanet.

        planet_id integer  # noqa: E501

        :param planet_id: The planet_id of this GetUniverseSystemsSystemIdPlanet.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and planet_id is None:
            raise ValueError("Invalid value for `planet_id`, must not be `None`")  # noqa: E501

        self._planet_id = planet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetUniverseSystemsSystemIdPlanet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUniverseSystemsSystemIdPlanet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUniverseSystemsSystemIdPlanet):
            return True

        return self.to_dict() != other.to_dict()
