# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationsCorporationIdMedalsIssued200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_id': 'int',
        'issued_at': 'datetime',
        'issuer_id': 'int',
        'medal_id': 'int',
        'reason': 'str',
        'status': 'str'
    }

    attribute_map = {
        'character_id': 'character_id',
        'issued_at': 'issued_at',
        'issuer_id': 'issuer_id',
        'medal_id': 'medal_id',
        'reason': 'reason',
        'status': 'status'
    }

    def __init__(self, character_id=None, issued_at=None, issuer_id=None, medal_id=None, reason=None, status=None, _configuration=None):  # noqa: E501
        """GetCorporationsCorporationIdMedalsIssued200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._character_id = None
        self._issued_at = None
        self._issuer_id = None
        self._medal_id = None
        self._reason = None
        self._status = None
        self.discriminator = None

        self.character_id = character_id
        self.issued_at = issued_at
        self.issuer_id = issuer_id
        self.medal_id = medal_id
        self.reason = reason
        self.status = status

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        ID of the character who was rewarded this medal  # noqa: E501

        :return: The character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who was rewarded this medal  # noqa: E501

        :param character_id: The character_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def issued_at(self):
        """Gets the issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        issued_at string  # noqa: E501

        :return: The issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.

        issued_at string  # noqa: E501

        :param issued_at: The issued_at of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and issued_at is None:
            raise ValueError("Invalid value for `issued_at`, must not be `None`")  # noqa: E501

        self._issued_at = issued_at

    @property
    def issuer_id(self):
        """Gets the issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        ID of the character who issued the medal  # noqa: E501

        :return: The issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        ID of the character who issued the medal  # noqa: E501

        :param issuer_id: The issuer_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and issuer_id is None:
            raise ValueError("Invalid value for `issuer_id`, must not be `None`")  # noqa: E501

        self._issuer_id = issuer_id

    @property
    def medal_id(self):
        """Gets the medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        medal_id integer  # noqa: E501

        :return: The medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: int
        """
        return self._medal_id

    @medal_id.setter
    def medal_id(self, medal_id):
        """Sets the medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.

        medal_id integer  # noqa: E501

        :param medal_id: The medal_id of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and medal_id is None:
            raise ValueError("Invalid value for `medal_id`, must not be `None`")  # noqa: E501

        self._medal_id = medal_id

    @property
    def reason(self):
        """Gets the reason of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        reason string  # noqa: E501

        :return: The reason of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetCorporationsCorporationIdMedalsIssued200Ok.

        reason string  # noqa: E501

        :param reason: The reason of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reason is not None and len(reason) > 1000):
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `1000`")  # noqa: E501

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501

        status string  # noqa: E501

        :return: The status of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCorporationsCorporationIdMedalsIssued200Ok.

        status string  # noqa: E501

        :param status: The status of this GetCorporationsCorporationIdMedalsIssued200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["private", "public"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationsCorporationIdMedalsIssued200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdMedalsIssued200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationsCorporationIdMedalsIssued200Ok):
            return True

        return self.to_dict() != other.to_dict()
