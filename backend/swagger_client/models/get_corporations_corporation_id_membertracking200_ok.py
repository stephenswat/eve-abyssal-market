# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCorporationsCorporationIdMembertracking200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_id': 'int',
        'character_id': 'int',
        'location_id': 'int',
        'logoff_date': 'datetime',
        'logon_date': 'datetime',
        'ship_type_id': 'int',
        'start_date': 'datetime'
    }

    attribute_map = {
        'base_id': 'base_id',
        'character_id': 'character_id',
        'location_id': 'location_id',
        'logoff_date': 'logoff_date',
        'logon_date': 'logon_date',
        'ship_type_id': 'ship_type_id',
        'start_date': 'start_date'
    }

    def __init__(self, base_id=None, character_id=None, location_id=None, logoff_date=None, logon_date=None, ship_type_id=None, start_date=None, _configuration=None):  # noqa: E501
        """GetCorporationsCorporationIdMembertracking200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_id = None
        self._character_id = None
        self._location_id = None
        self._logoff_date = None
        self._logon_date = None
        self._ship_type_id = None
        self._start_date = None
        self.discriminator = None

        if base_id is not None:
            self.base_id = base_id
        self.character_id = character_id
        if location_id is not None:
            self.location_id = location_id
        if logoff_date is not None:
            self.logoff_date = logoff_date
        if logon_date is not None:
            self.logon_date = logon_date
        if ship_type_id is not None:
            self.ship_type_id = ship_type_id
        if start_date is not None:
            self.start_date = start_date

    @property
    def base_id(self):
        """Gets the base_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        base_id integer  # noqa: E501

        :return: The base_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: int
        """
        return self._base_id

    @base_id.setter
    def base_id(self, base_id):
        """Sets the base_id of this GetCorporationsCorporationIdMembertracking200Ok.

        base_id integer  # noqa: E501

        :param base_id: The base_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: int
        """

        self._base_id = base_id

    @property
    def character_id(self):
        """Gets the character_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        character_id integer  # noqa: E501

        :return: The character_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this GetCorporationsCorporationIdMembertracking200Ok.

        character_id integer  # noqa: E501

        :param character_id: The character_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def location_id(self):
        """Gets the location_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        location_id integer  # noqa: E501

        :return: The location_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetCorporationsCorporationIdMembertracking200Ok.

        location_id integer  # noqa: E501

        :param location_id: The location_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def logoff_date(self):
        """Gets the logoff_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        logoff_date string  # noqa: E501

        :return: The logoff_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._logoff_date

    @logoff_date.setter
    def logoff_date(self, logoff_date):
        """Sets the logoff_date of this GetCorporationsCorporationIdMembertracking200Ok.

        logoff_date string  # noqa: E501

        :param logoff_date: The logoff_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: datetime
        """

        self._logoff_date = logoff_date

    @property
    def logon_date(self):
        """Gets the logon_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        logon_date string  # noqa: E501

        :return: The logon_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._logon_date

    @logon_date.setter
    def logon_date(self, logon_date):
        """Sets the logon_date of this GetCorporationsCorporationIdMembertracking200Ok.

        logon_date string  # noqa: E501

        :param logon_date: The logon_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: datetime
        """

        self._logon_date = logon_date

    @property
    def ship_type_id(self):
        """Gets the ship_type_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        ship_type_id integer  # noqa: E501

        :return: The ship_type_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: int
        """
        return self._ship_type_id

    @ship_type_id.setter
    def ship_type_id(self, ship_type_id):
        """Sets the ship_type_id of this GetCorporationsCorporationIdMembertracking200Ok.

        ship_type_id integer  # noqa: E501

        :param ship_type_id: The ship_type_id of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: int
        """

        self._ship_type_id = ship_type_id

    @property
    def start_date(self):
        """Gets the start_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501

        start_date string  # noqa: E501

        :return: The start_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetCorporationsCorporationIdMembertracking200Ok.

        start_date string  # noqa: E501

        :param start_date: The start_date of this GetCorporationsCorporationIdMembertracking200Ok.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCorporationsCorporationIdMembertracking200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCorporationsCorporationIdMembertracking200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCorporationsCorporationIdMembertracking200Ok):
            return True

        return self.to_dict() != other.to_dict()
