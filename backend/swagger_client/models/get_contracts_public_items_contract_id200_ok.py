# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetContractsPublicItemsContractId200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_blueprint_copy': 'bool',
        'is_included': 'bool',
        'item_id': 'int',
        'material_efficiency': 'int',
        'quantity': 'int',
        'record_id': 'int',
        'runs': 'int',
        'time_efficiency': 'int',
        'type_id': 'int'
    }

    attribute_map = {
        'is_blueprint_copy': 'is_blueprint_copy',
        'is_included': 'is_included',
        'item_id': 'item_id',
        'material_efficiency': 'material_efficiency',
        'quantity': 'quantity',
        'record_id': 'record_id',
        'runs': 'runs',
        'time_efficiency': 'time_efficiency',
        'type_id': 'type_id'
    }

    def __init__(self, is_blueprint_copy=None, is_included=None, item_id=None, material_efficiency=None, quantity=None, record_id=None, runs=None, time_efficiency=None, type_id=None, _configuration=None):  # noqa: E501
        """GetContractsPublicItemsContractId200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_blueprint_copy = None
        self._is_included = None
        self._item_id = None
        self._material_efficiency = None
        self._quantity = None
        self._record_id = None
        self._runs = None
        self._time_efficiency = None
        self._type_id = None
        self.discriminator = None

        if is_blueprint_copy is not None:
            self.is_blueprint_copy = is_blueprint_copy
        self.is_included = is_included
        if item_id is not None:
            self.item_id = item_id
        if material_efficiency is not None:
            self.material_efficiency = material_efficiency
        self.quantity = quantity
        self.record_id = record_id
        if runs is not None:
            self.runs = runs
        if time_efficiency is not None:
            self.time_efficiency = time_efficiency
        self.type_id = type_id

    @property
    def is_blueprint_copy(self):
        """Gets the is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        is_blueprint_copy boolean  # noqa: E501

        :return: The is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: bool
        """
        return self._is_blueprint_copy

    @is_blueprint_copy.setter
    def is_blueprint_copy(self, is_blueprint_copy):
        """Sets the is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.

        is_blueprint_copy boolean  # noqa: E501

        :param is_blueprint_copy: The is_blueprint_copy of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: bool
        """

        self._is_blueprint_copy = is_blueprint_copy

    @property
    def is_included(self):
        """Gets the is_included of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract  # noqa: E501

        :return: The is_included of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this GetContractsPublicItemsContractId200Ok.

        true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract  # noqa: E501

        :param is_included: The is_included of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_included is None:
            raise ValueError("Invalid value for `is_included`, must not be `None`")  # noqa: E501

        self._is_included = is_included

    @property
    def item_id(self):
        """Gets the item_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract  # noqa: E501

        :return: The item_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract  # noqa: E501

        :param item_id: The item_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def material_efficiency(self):
        """Gets the material_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Material Efficiency Level of the blueprint  # noqa: E501

        :return: The material_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._material_efficiency

    @material_efficiency.setter
    def material_efficiency(self, material_efficiency):
        """Sets the material_efficiency of this GetContractsPublicItemsContractId200Ok.

        Material Efficiency Level of the blueprint  # noqa: E501

        :param material_efficiency: The material_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                material_efficiency is not None and material_efficiency > 25):  # noqa: E501
            raise ValueError("Invalid value for `material_efficiency`, must be a value less than or equal to `25`")  # noqa: E501
        if (self._configuration.client_side_validation and
                material_efficiency is not None and material_efficiency < 0):  # noqa: E501
            raise ValueError("Invalid value for `material_efficiency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._material_efficiency = material_efficiency

    @property
    def quantity(self):
        """Gets the quantity of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Number of items in the stack  # noqa: E501

        :return: The quantity of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetContractsPublicItemsContractId200Ok.

        Number of items in the stack  # noqa: E501

        :param quantity: The quantity of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def record_id(self):
        """Gets the record_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Unique ID for the item, used by the contract system  # noqa: E501

        :return: The record_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this GetContractsPublicItemsContractId200Ok.

        Unique ID for the item, used by the contract system  # noqa: E501

        :param record_id: The record_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def runs(self):
        """Gets the runs of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Number of runs remaining if the blueprint is a copy, -1 if it is an original  # noqa: E501

        :return: The runs of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this GetContractsPublicItemsContractId200Ok.

        Number of runs remaining if the blueprint is a copy, -1 if it is an original  # noqa: E501

        :param runs: The runs of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                runs is not None and runs < -1):  # noqa: E501
            raise ValueError("Invalid value for `runs`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._runs = runs

    @property
    def time_efficiency(self):
        """Gets the time_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Time Efficiency Level of the blueprint  # noqa: E501

        :return: The time_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._time_efficiency

    @time_efficiency.setter
    def time_efficiency(self, time_efficiency):
        """Sets the time_efficiency of this GetContractsPublicItemsContractId200Ok.

        Time Efficiency Level of the blueprint  # noqa: E501

        :param time_efficiency: The time_efficiency of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                time_efficiency is not None and time_efficiency > 20):  # noqa: E501
            raise ValueError("Invalid value for `time_efficiency`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_efficiency is not None and time_efficiency < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_efficiency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_efficiency = time_efficiency

    @property
    def type_id(self):
        """Gets the type_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501

        Type ID for item  # noqa: E501

        :return: The type_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetContractsPublicItemsContractId200Ok.

        Type ID for item  # noqa: E501

        :param type_id: The type_id of this GetContractsPublicItemsContractId200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetContractsPublicItemsContractId200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetContractsPublicItemsContractId200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetContractsPublicItemsContractId200Ok):
            return True

        return self.to_dict() != other.to_dict()
