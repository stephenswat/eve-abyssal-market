# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetAlliancesAllianceIdContacts200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_id': 'int',
        'contact_type': 'str',
        'label_ids': 'list[int]',
        'standing': 'float'
    }

    attribute_map = {
        'contact_id': 'contact_id',
        'contact_type': 'contact_type',
        'label_ids': 'label_ids',
        'standing': 'standing'
    }

    def __init__(self, contact_id=None, contact_type=None, label_ids=None, standing=None, _configuration=None):  # noqa: E501
        """GetAlliancesAllianceIdContacts200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_id = None
        self._contact_type = None
        self._label_ids = None
        self._standing = None
        self.discriminator = None

        self.contact_id = contact_id
        self.contact_type = contact_type
        if label_ids is not None:
            self.label_ids = label_ids
        self.standing = standing

    @property
    def contact_id(self):
        """Gets the contact_id of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501

        contact_id integer  # noqa: E501

        :return: The contact_id of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this GetAlliancesAllianceIdContacts200Ok.

        contact_id integer  # noqa: E501

        :param contact_id: The contact_id of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")  # noqa: E501

        self._contact_id = contact_id

    @property
    def contact_type(self):
        """Gets the contact_type of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501

        contact_type string  # noqa: E501

        :return: The contact_type of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this GetAlliancesAllianceIdContacts200Ok.

        contact_type string  # noqa: E501

        :param contact_type: The contact_type of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contact_type is None:
            raise ValueError("Invalid value for `contact_type`, must not be `None`")  # noqa: E501
        allowed_values = ["character", "corporation", "alliance", "faction"]  # noqa: E501
        if (self._configuration.client_side_validation and
                contact_type not in allowed_values):
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def label_ids(self):
        """Gets the label_ids of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501

        label_ids array  # noqa: E501

        :return: The label_ids of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this GetAlliancesAllianceIdContacts200Ok.

        label_ids array  # noqa: E501

        :param label_ids: The label_ids of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :type: list[int]
        """

        self._label_ids = label_ids

    @property
    def standing(self):
        """Gets the standing of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501

        Standing of the contact  # noqa: E501

        :return: The standing of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :rtype: float
        """
        return self._standing

    @standing.setter
    def standing(self, standing):
        """Sets the standing of this GetAlliancesAllianceIdContacts200Ok.

        Standing of the contact  # noqa: E501

        :param standing: The standing of this GetAlliancesAllianceIdContacts200Ok.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and standing is None:
            raise ValueError("Invalid value for `standing`, must not be `None`")  # noqa: E501

        self._standing = standing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAlliancesAllianceIdContacts200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAlliancesAllianceIdContacts200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAlliancesAllianceIdContacts200Ok):
            return True

        return self.to_dict() != other.to_dict()
