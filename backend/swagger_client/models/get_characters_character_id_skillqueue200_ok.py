# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCharactersCharacterIdSkillqueue200Ok(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'finish_date': 'datetime',
        'finished_level': 'int',
        'level_end_sp': 'int',
        'level_start_sp': 'int',
        'queue_position': 'int',
        'skill_id': 'int',
        'start_date': 'datetime',
        'training_start_sp': 'int'
    }

    attribute_map = {
        'finish_date': 'finish_date',
        'finished_level': 'finished_level',
        'level_end_sp': 'level_end_sp',
        'level_start_sp': 'level_start_sp',
        'queue_position': 'queue_position',
        'skill_id': 'skill_id',
        'start_date': 'start_date',
        'training_start_sp': 'training_start_sp'
    }

    def __init__(self, finish_date=None, finished_level=None, level_end_sp=None, level_start_sp=None, queue_position=None, skill_id=None, start_date=None, training_start_sp=None, _configuration=None):  # noqa: E501
        """GetCharactersCharacterIdSkillqueue200Ok - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._finish_date = None
        self._finished_level = None
        self._level_end_sp = None
        self._level_start_sp = None
        self._queue_position = None
        self._skill_id = None
        self._start_date = None
        self._training_start_sp = None
        self.discriminator = None

        if finish_date is not None:
            self.finish_date = finish_date
        self.finished_level = finished_level
        if level_end_sp is not None:
            self.level_end_sp = level_end_sp
        if level_start_sp is not None:
            self.level_start_sp = level_start_sp
        self.queue_position = queue_position
        self.skill_id = skill_id
        if start_date is not None:
            self.start_date = start_date
        if training_start_sp is not None:
            self.training_start_sp = training_start_sp

    @property
    def finish_date(self):
        """Gets the finish_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        Date on which training of the skill will complete. Omitted if the skill queue is paused.  # noqa: E501

        :return: The finish_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """Sets the finish_date of this GetCharactersCharacterIdSkillqueue200Ok.

        Date on which training of the skill will complete. Omitted if the skill queue is paused.  # noqa: E501

        :param finish_date: The finish_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: datetime
        """

        self._finish_date = finish_date

    @property
    def finished_level(self):
        """Gets the finished_level of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        finished_level integer  # noqa: E501

        :return: The finished_level of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._finished_level

    @finished_level.setter
    def finished_level(self, finished_level):
        """Sets the finished_level of this GetCharactersCharacterIdSkillqueue200Ok.

        finished_level integer  # noqa: E501

        :param finished_level: The finished_level of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and finished_level is None:
            raise ValueError("Invalid value for `finished_level`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                finished_level is not None and finished_level > 5):  # noqa: E501
            raise ValueError("Invalid value for `finished_level`, must be a value less than or equal to `5`")  # noqa: E501
        if (self._configuration.client_side_validation and
                finished_level is not None and finished_level < 0):  # noqa: E501
            raise ValueError("Invalid value for `finished_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._finished_level = finished_level

    @property
    def level_end_sp(self):
        """Gets the level_end_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        level_end_sp integer  # noqa: E501

        :return: The level_end_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._level_end_sp

    @level_end_sp.setter
    def level_end_sp(self, level_end_sp):
        """Sets the level_end_sp of this GetCharactersCharacterIdSkillqueue200Ok.

        level_end_sp integer  # noqa: E501

        :param level_end_sp: The level_end_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """

        self._level_end_sp = level_end_sp

    @property
    def level_start_sp(self):
        """Gets the level_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.  # noqa: E501

        :return: The level_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._level_start_sp

    @level_start_sp.setter
    def level_start_sp(self, level_start_sp):
        """Sets the level_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.

        Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.  # noqa: E501

        :param level_start_sp: The level_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """

        self._level_start_sp = level_start_sp

    @property
    def queue_position(self):
        """Gets the queue_position of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        queue_position integer  # noqa: E501

        :return: The queue_position of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._queue_position

    @queue_position.setter
    def queue_position(self, queue_position):
        """Sets the queue_position of this GetCharactersCharacterIdSkillqueue200Ok.

        queue_position integer  # noqa: E501

        :param queue_position: The queue_position of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and queue_position is None:
            raise ValueError("Invalid value for `queue_position`, must not be `None`")  # noqa: E501

        self._queue_position = queue_position

    @property
    def skill_id(self):
        """Gets the skill_id of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        skill_id integer  # noqa: E501

        :return: The skill_id of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._skill_id

    @skill_id.setter
    def skill_id(self, skill_id):
        """Sets the skill_id of this GetCharactersCharacterIdSkillqueue200Ok.

        skill_id integer  # noqa: E501

        :param skill_id: The skill_id of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and skill_id is None:
            raise ValueError("Invalid value for `skill_id`, must not be `None`")  # noqa: E501

        self._skill_id = skill_id

    @property
    def start_date(self):
        """Gets the start_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        start_date string  # noqa: E501

        :return: The start_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetCharactersCharacterIdSkillqueue200Ok.

        start_date string  # noqa: E501

        :param start_date: The start_date of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def training_start_sp(self):
        """Gets the training_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501

        training_start_sp integer  # noqa: E501

        :return: The training_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :rtype: int
        """
        return self._training_start_sp

    @training_start_sp.setter
    def training_start_sp(self, training_start_sp):
        """Sets the training_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.

        training_start_sp integer  # noqa: E501

        :param training_start_sp: The training_start_sp of this GetCharactersCharacterIdSkillqueue200Ok.  # noqa: E501
        :type: int
        """

        self._training_start_sp = training_start_sp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCharactersCharacterIdSkillqueue200Ok, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdSkillqueue200Ok):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCharactersCharacterIdSkillqueue200Ok):
            return True

        return self.to_dict() != other.to_dict()
