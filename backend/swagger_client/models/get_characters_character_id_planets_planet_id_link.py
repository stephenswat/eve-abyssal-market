# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCharactersCharacterIdPlanetsPlanetIdLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_pin_id': 'int',
        'link_level': 'int',
        'source_pin_id': 'int'
    }

    attribute_map = {
        'destination_pin_id': 'destination_pin_id',
        'link_level': 'link_level',
        'source_pin_id': 'source_pin_id'
    }

    def __init__(self, destination_pin_id=None, link_level=None, source_pin_id=None, _configuration=None):  # noqa: E501
        """GetCharactersCharacterIdPlanetsPlanetIdLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destination_pin_id = None
        self._link_level = None
        self._source_pin_id = None
        self.discriminator = None

        self.destination_pin_id = destination_pin_id
        self.link_level = link_level
        self.source_pin_id = source_pin_id

    @property
    def destination_pin_id(self):
        """Gets the destination_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501

        destination_pin_id integer  # noqa: E501

        :return: The destination_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :rtype: int
        """
        return self._destination_pin_id

    @destination_pin_id.setter
    def destination_pin_id(self, destination_pin_id):
        """Sets the destination_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.

        destination_pin_id integer  # noqa: E501

        :param destination_pin_id: The destination_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and destination_pin_id is None:
            raise ValueError("Invalid value for `destination_pin_id`, must not be `None`")  # noqa: E501

        self._destination_pin_id = destination_pin_id

    @property
    def link_level(self):
        """Gets the link_level of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501

        link_level integer  # noqa: E501

        :return: The link_level of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :rtype: int
        """
        return self._link_level

    @link_level.setter
    def link_level(self, link_level):
        """Sets the link_level of this GetCharactersCharacterIdPlanetsPlanetIdLink.

        link_level integer  # noqa: E501

        :param link_level: The link_level of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and link_level is None:
            raise ValueError("Invalid value for `link_level`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                link_level is not None and link_level > 10):  # noqa: E501
            raise ValueError("Invalid value for `link_level`, must be a value less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                link_level is not None and link_level < 0):  # noqa: E501
            raise ValueError("Invalid value for `link_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._link_level = link_level

    @property
    def source_pin_id(self):
        """Gets the source_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501

        source_pin_id integer  # noqa: E501

        :return: The source_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :rtype: int
        """
        return self._source_pin_id

    @source_pin_id.setter
    def source_pin_id(self, source_pin_id):
        """Sets the source_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.

        source_pin_id integer  # noqa: E501

        :param source_pin_id: The source_pin_id of this GetCharactersCharacterIdPlanetsPlanetIdLink.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and source_pin_id is None:
            raise ValueError("Invalid value for `source_pin_id`, must not be `None`")  # noqa: E501

        self._source_pin_id = source_pin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCharactersCharacterIdPlanetsPlanetIdLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdPlanetsPlanetIdLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCharactersCharacterIdPlanetsPlanetIdLink):
            return True

        return self.to_dict() != other.to_dict()
