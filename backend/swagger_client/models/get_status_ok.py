# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetStatusOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'players': 'int',
        'server_version': 'str',
        'start_time': 'datetime',
        'vip': 'bool'
    }

    attribute_map = {
        'players': 'players',
        'server_version': 'server_version',
        'start_time': 'start_time',
        'vip': 'vip'
    }

    def __init__(self, players=None, server_version=None, start_time=None, vip=None, _configuration=None):  # noqa: E501
        """GetStatusOk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._players = None
        self._server_version = None
        self._start_time = None
        self._vip = None
        self.discriminator = None

        self.players = players
        self.server_version = server_version
        self.start_time = start_time
        if vip is not None:
            self.vip = vip

    @property
    def players(self):
        """Gets the players of this GetStatusOk.  # noqa: E501

        Current online player count  # noqa: E501

        :return: The players of this GetStatusOk.  # noqa: E501
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this GetStatusOk.

        Current online player count  # noqa: E501

        :param players: The players of this GetStatusOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")  # noqa: E501

        self._players = players

    @property
    def server_version(self):
        """Gets the server_version of this GetStatusOk.  # noqa: E501

        Running version as string  # noqa: E501

        :return: The server_version of this GetStatusOk.  # noqa: E501
        :rtype: str
        """
        return self._server_version

    @server_version.setter
    def server_version(self, server_version):
        """Sets the server_version of this GetStatusOk.

        Running version as string  # noqa: E501

        :param server_version: The server_version of this GetStatusOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and server_version is None:
            raise ValueError("Invalid value for `server_version`, must not be `None`")  # noqa: E501

        self._server_version = server_version

    @property
    def start_time(self):
        """Gets the start_time of this GetStatusOk.  # noqa: E501

        Server start timestamp  # noqa: E501

        :return: The start_time of this GetStatusOk.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetStatusOk.

        Server start timestamp  # noqa: E501

        :param start_time: The start_time of this GetStatusOk.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def vip(self):
        """Gets the vip of this GetStatusOk.  # noqa: E501

        If the server is in VIP mode  # noqa: E501

        :return: The vip of this GetStatusOk.  # noqa: E501
        :rtype: bool
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this GetStatusOk.

        If the server is in VIP mode  # noqa: E501

        :param vip: The vip of this GetStatusOk.  # noqa: E501
        :type: bool
        """

        self._vip = vip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStatusOk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStatusOk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetStatusOk):
            return True

        return self.to_dict() != other.to_dict()
