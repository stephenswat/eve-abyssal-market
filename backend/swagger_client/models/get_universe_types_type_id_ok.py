# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetUniverseTypesTypeIdOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'float',
        'description': 'str',
        'dogma_attributes': 'list[GetUniverseTypesTypeIdDogmaAttribute]',
        'dogma_effects': 'list[GetUniverseTypesTypeIdDogmaEffect]',
        'graphic_id': 'int',
        'group_id': 'int',
        'icon_id': 'int',
        'market_group_id': 'int',
        'mass': 'float',
        'name': 'str',
        'packaged_volume': 'float',
        'portion_size': 'int',
        'published': 'bool',
        'radius': 'float',
        'type_id': 'int',
        'volume': 'float'
    }

    attribute_map = {
        'capacity': 'capacity',
        'description': 'description',
        'dogma_attributes': 'dogma_attributes',
        'dogma_effects': 'dogma_effects',
        'graphic_id': 'graphic_id',
        'group_id': 'group_id',
        'icon_id': 'icon_id',
        'market_group_id': 'market_group_id',
        'mass': 'mass',
        'name': 'name',
        'packaged_volume': 'packaged_volume',
        'portion_size': 'portion_size',
        'published': 'published',
        'radius': 'radius',
        'type_id': 'type_id',
        'volume': 'volume'
    }

    def __init__(self, capacity=None, description=None, dogma_attributes=None, dogma_effects=None, graphic_id=None, group_id=None, icon_id=None, market_group_id=None, mass=None, name=None, packaged_volume=None, portion_size=None, published=None, radius=None, type_id=None, volume=None, _configuration=None):  # noqa: E501
        """GetUniverseTypesTypeIdOk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._capacity = None
        self._description = None
        self._dogma_attributes = None
        self._dogma_effects = None
        self._graphic_id = None
        self._group_id = None
        self._icon_id = None
        self._market_group_id = None
        self._mass = None
        self._name = None
        self._packaged_volume = None
        self._portion_size = None
        self._published = None
        self._radius = None
        self._type_id = None
        self._volume = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        self.description = description
        if dogma_attributes is not None:
            self.dogma_attributes = dogma_attributes
        if dogma_effects is not None:
            self.dogma_effects = dogma_effects
        if graphic_id is not None:
            self.graphic_id = graphic_id
        self.group_id = group_id
        if icon_id is not None:
            self.icon_id = icon_id
        if market_group_id is not None:
            self.market_group_id = market_group_id
        if mass is not None:
            self.mass = mass
        self.name = name
        if packaged_volume is not None:
            self.packaged_volume = packaged_volume
        if portion_size is not None:
            self.portion_size = portion_size
        self.published = published
        if radius is not None:
            self.radius = radius
        self.type_id = type_id
        if volume is not None:
            self.volume = volume

    @property
    def capacity(self):
        """Gets the capacity of this GetUniverseTypesTypeIdOk.  # noqa: E501

        capacity number  # noqa: E501

        :return: The capacity of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this GetUniverseTypesTypeIdOk.

        capacity number  # noqa: E501

        :param capacity: The capacity of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: float
        """

        self._capacity = capacity

    @property
    def description(self):
        """Gets the description of this GetUniverseTypesTypeIdOk.  # noqa: E501

        description string  # noqa: E501

        :return: The description of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetUniverseTypesTypeIdOk.

        description string  # noqa: E501

        :param description: The description of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def dogma_attributes(self):
        """Gets the dogma_attributes of this GetUniverseTypesTypeIdOk.  # noqa: E501

        dogma_attributes array  # noqa: E501

        :return: The dogma_attributes of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: list[GetUniverseTypesTypeIdDogmaAttribute]
        """
        return self._dogma_attributes

    @dogma_attributes.setter
    def dogma_attributes(self, dogma_attributes):
        """Sets the dogma_attributes of this GetUniverseTypesTypeIdOk.

        dogma_attributes array  # noqa: E501

        :param dogma_attributes: The dogma_attributes of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: list[GetUniverseTypesTypeIdDogmaAttribute]
        """

        self._dogma_attributes = dogma_attributes

    @property
    def dogma_effects(self):
        """Gets the dogma_effects of this GetUniverseTypesTypeIdOk.  # noqa: E501

        dogma_effects array  # noqa: E501

        :return: The dogma_effects of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: list[GetUniverseTypesTypeIdDogmaEffect]
        """
        return self._dogma_effects

    @dogma_effects.setter
    def dogma_effects(self, dogma_effects):
        """Sets the dogma_effects of this GetUniverseTypesTypeIdOk.

        dogma_effects array  # noqa: E501

        :param dogma_effects: The dogma_effects of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: list[GetUniverseTypesTypeIdDogmaEffect]
        """

        self._dogma_effects = dogma_effects

    @property
    def graphic_id(self):
        """Gets the graphic_id of this GetUniverseTypesTypeIdOk.  # noqa: E501

        graphic_id integer  # noqa: E501

        :return: The graphic_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._graphic_id

    @graphic_id.setter
    def graphic_id(self, graphic_id):
        """Sets the graphic_id of this GetUniverseTypesTypeIdOk.

        graphic_id integer  # noqa: E501

        :param graphic_id: The graphic_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """

        self._graphic_id = graphic_id

    @property
    def group_id(self):
        """Gets the group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501

        group_id integer  # noqa: E501

        :return: The group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetUniverseTypesTypeIdOk.

        group_id integer  # noqa: E501

        :param group_id: The group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def icon_id(self):
        """Gets the icon_id of this GetUniverseTypesTypeIdOk.  # noqa: E501

        icon_id integer  # noqa: E501

        :return: The icon_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this GetUniverseTypesTypeIdOk.

        icon_id integer  # noqa: E501

        :param icon_id: The icon_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """

        self._icon_id = icon_id

    @property
    def market_group_id(self):
        """Gets the market_group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501

        This only exists for types that can be put on the market  # noqa: E501

        :return: The market_group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._market_group_id

    @market_group_id.setter
    def market_group_id(self, market_group_id):
        """Sets the market_group_id of this GetUniverseTypesTypeIdOk.

        This only exists for types that can be put on the market  # noqa: E501

        :param market_group_id: The market_group_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """

        self._market_group_id = market_group_id

    @property
    def mass(self):
        """Gets the mass of this GetUniverseTypesTypeIdOk.  # noqa: E501

        mass number  # noqa: E501

        :return: The mass of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this GetUniverseTypesTypeIdOk.

        mass number  # noqa: E501

        :param mass: The mass of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: float
        """

        self._mass = mass

    @property
    def name(self):
        """Gets the name of this GetUniverseTypesTypeIdOk.  # noqa: E501

        name string  # noqa: E501

        :return: The name of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUniverseTypesTypeIdOk.

        name string  # noqa: E501

        :param name: The name of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def packaged_volume(self):
        """Gets the packaged_volume of this GetUniverseTypesTypeIdOk.  # noqa: E501

        packaged_volume number  # noqa: E501

        :return: The packaged_volume of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: float
        """
        return self._packaged_volume

    @packaged_volume.setter
    def packaged_volume(self, packaged_volume):
        """Sets the packaged_volume of this GetUniverseTypesTypeIdOk.

        packaged_volume number  # noqa: E501

        :param packaged_volume: The packaged_volume of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: float
        """

        self._packaged_volume = packaged_volume

    @property
    def portion_size(self):
        """Gets the portion_size of this GetUniverseTypesTypeIdOk.  # noqa: E501

        portion_size integer  # noqa: E501

        :return: The portion_size of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._portion_size

    @portion_size.setter
    def portion_size(self, portion_size):
        """Sets the portion_size of this GetUniverseTypesTypeIdOk.

        portion_size integer  # noqa: E501

        :param portion_size: The portion_size of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """

        self._portion_size = portion_size

    @property
    def published(self):
        """Gets the published of this GetUniverseTypesTypeIdOk.  # noqa: E501

        published boolean  # noqa: E501

        :return: The published of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this GetUniverseTypesTypeIdOk.

        published boolean  # noqa: E501

        :param published: The published of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    @property
    def radius(self):
        """Gets the radius of this GetUniverseTypesTypeIdOk.  # noqa: E501

        radius number  # noqa: E501

        :return: The radius of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GetUniverseTypesTypeIdOk.

        radius number  # noqa: E501

        :param radius: The radius of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: float
        """

        self._radius = radius

    @property
    def type_id(self):
        """Gets the type_id of this GetUniverseTypesTypeIdOk.  # noqa: E501

        type_id integer  # noqa: E501

        :return: The type_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetUniverseTypesTypeIdOk.

        type_id integer  # noqa: E501

        :param type_id: The type_id of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def volume(self):
        """Gets the volume of this GetUniverseTypesTypeIdOk.  # noqa: E501

        volume number  # noqa: E501

        :return: The volume of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GetUniverseTypesTypeIdOk.

        volume number  # noqa: E501

        :param volume: The volume of this GetUniverseTypesTypeIdOk.  # noqa: E501
        :type: float
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetUniverseTypesTypeIdOk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUniverseTypesTypeIdOk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUniverseTypesTypeIdOk):
            return True

        return self.to_dict() != other.to_dict()
