# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCharactersCharacterIdLocationOk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'solar_system_id': 'int',
        'station_id': 'int',
        'structure_id': 'int'
    }

    attribute_map = {
        'solar_system_id': 'solar_system_id',
        'station_id': 'station_id',
        'structure_id': 'structure_id'
    }

    def __init__(self, solar_system_id=None, station_id=None, structure_id=None, _configuration=None):  # noqa: E501
        """GetCharactersCharacterIdLocationOk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._solar_system_id = None
        self._station_id = None
        self._structure_id = None
        self.discriminator = None

        self.solar_system_id = solar_system_id
        if station_id is not None:
            self.station_id = station_id
        if structure_id is not None:
            self.structure_id = structure_id

    @property
    def solar_system_id(self):
        """Gets the solar_system_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501

        solar_system_id integer  # noqa: E501

        :return: The solar_system_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :rtype: int
        """
        return self._solar_system_id

    @solar_system_id.setter
    def solar_system_id(self, solar_system_id):
        """Sets the solar_system_id of this GetCharactersCharacterIdLocationOk.

        solar_system_id integer  # noqa: E501

        :param solar_system_id: The solar_system_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and solar_system_id is None:
            raise ValueError("Invalid value for `solar_system_id`, must not be `None`")  # noqa: E501

        self._solar_system_id = solar_system_id

    @property
    def station_id(self):
        """Gets the station_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501

        station_id integer  # noqa: E501

        :return: The station_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :rtype: int
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this GetCharactersCharacterIdLocationOk.

        station_id integer  # noqa: E501

        :param station_id: The station_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :type: int
        """

        self._station_id = station_id

    @property
    def structure_id(self):
        """Gets the structure_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501

        structure_id integer  # noqa: E501

        :return: The structure_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :rtype: int
        """
        return self._structure_id

    @structure_id.setter
    def structure_id(self, structure_id):
        """Sets the structure_id of this GetCharactersCharacterIdLocationOk.

        structure_id integer  # noqa: E501

        :param structure_id: The structure_id of this GetCharactersCharacterIdLocationOk.  # noqa: E501
        :type: int
        """

        self._structure_id = structure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCharactersCharacterIdLocationOk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdLocationOk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCharactersCharacterIdLocationOk):
            return True

        return self.to_dict() != other.to_dict()
