# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetCharactersCharacterIdMedalsGraphic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'int',
        'graphic': 'str',
        'layer': 'int',
        'part': 'int'
    }

    attribute_map = {
        'color': 'color',
        'graphic': 'graphic',
        'layer': 'layer',
        'part': 'part'
    }

    def __init__(self, color=None, graphic=None, layer=None, part=None, _configuration=None):  # noqa: E501
        """GetCharactersCharacterIdMedalsGraphic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._color = None
        self._graphic = None
        self._layer = None
        self._part = None
        self.discriminator = None

        if color is not None:
            self.color = color
        self.graphic = graphic
        self.layer = layer
        self.part = part

    @property
    def color(self):
        """Gets the color of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501

        color integer  # noqa: E501

        :return: The color of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GetCharactersCharacterIdMedalsGraphic.

        color integer  # noqa: E501

        :param color: The color of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :type: int
        """

        self._color = color

    @property
    def graphic(self):
        """Gets the graphic of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501

        graphic string  # noqa: E501

        :return: The graphic of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :rtype: str
        """
        return self._graphic

    @graphic.setter
    def graphic(self, graphic):
        """Sets the graphic of this GetCharactersCharacterIdMedalsGraphic.

        graphic string  # noqa: E501

        :param graphic: The graphic of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and graphic is None:
            raise ValueError("Invalid value for `graphic`, must not be `None`")  # noqa: E501

        self._graphic = graphic

    @property
    def layer(self):
        """Gets the layer of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501

        layer integer  # noqa: E501

        :return: The layer of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :rtype: int
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this GetCharactersCharacterIdMedalsGraphic.

        layer integer  # noqa: E501

        :param layer: The layer of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and layer is None:
            raise ValueError("Invalid value for `layer`, must not be `None`")  # noqa: E501

        self._layer = layer

    @property
    def part(self):
        """Gets the part of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501

        part integer  # noqa: E501

        :return: The part of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :rtype: int
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this GetCharactersCharacterIdMedalsGraphic.

        part integer  # noqa: E501

        :param part: The part of this GetCharactersCharacterIdMedalsGraphic.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and part is None:
            raise ValueError("Invalid value for `part`, must not be `None`")  # noqa: E501

        self._part = part

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCharactersCharacterIdMedalsGraphic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCharactersCharacterIdMedalsGraphic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCharactersCharacterIdMedalsGraphic):
            return True

        return self.to_dict() != other.to_dict()
