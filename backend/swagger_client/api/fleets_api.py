# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    OpenAPI spec version: 1.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FleetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_fleets_fleet_id_members_member_id(self, fleet_id, member_id, **kwargs):  # noqa: E501
        """Kick fleet member  # noqa: E501

        Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_members_member_id(fleet_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, **kwargs)  # noqa: E501
            return data

    def delete_fleets_fleet_id_members_member_id_with_http_info(self, fleet_id, member_id, **kwargs):  # noqa: E501
        """Kick fleet member  # noqa: E501

        Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'member_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_members_member_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_members_member_id`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if self.api_client.client_side_validation and ('member_id' not in params or
                                                       params['member_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_id` when calling `delete_fleets_fleet_id_members_member_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'member_id' in params:
            path_params['member_id'] = params['member_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/members/{member_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_fleets_fleet_id_squads_squad_id(self, fleet_id, squad_id, **kwargs):  # noqa: E501
        """Delete fleet squad  # noqa: E501

        Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int squad_id: The squad to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, **kwargs)  # noqa: E501
            return data

    def delete_fleets_fleet_id_squads_squad_id_with_http_info(self, fleet_id, squad_id, **kwargs):  # noqa: E501
        """Delete fleet squad  # noqa: E501

        Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int squad_id: The squad to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'squad_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_squads_squad_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_squads_squad_id`")  # noqa: E501
        # verify the required parameter 'squad_id' is set
        if self.api_client.client_side_validation and ('squad_id' not in params or
                                                       params['squad_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `squad_id` when calling `delete_fleets_fleet_id_squads_squad_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'squad_id' in params:
            path_params['squad_id'] = params['squad_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/squads/{squad_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_fleets_fleet_id_wings_wing_id(self, fleet_id, wing_id, **kwargs):  # noqa: E501
        """Delete fleet wing  # noqa: E501

        Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, **kwargs)  # noqa: E501
            return data

    def delete_fleets_fleet_id_wings_wing_id_with_http_info(self, fleet_id, wing_id, **kwargs):  # noqa: E501
        """Delete fleet wing  # noqa: E501

        Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing to delete (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'wing_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fleets_fleet_id_wings_wing_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `delete_fleets_fleet_id_wings_wing_id`")  # noqa: E501
        # verify the required parameter 'wing_id' is set
        if self.api_client.client_side_validation and ('wing_id' not in params or
                                                       params['wing_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wing_id` when calling `delete_fleets_fleet_id_wings_wing_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/wings/{wing_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_characters_character_id_fleet(self, character_id, **kwargs):  # noqa: E501
        """Get character fleet info  # noqa: E501

        Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_fleet(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: GetCharactersCharacterIdFleetOk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_characters_character_id_fleet_with_http_info(character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_characters_character_id_fleet_with_http_info(character_id, **kwargs)  # noqa: E501
            return data

    def get_characters_character_id_fleet_with_http_info(self, character_id, **kwargs):  # noqa: E501
        """Get character fleet info  # noqa: E501

        Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_fleet_with_http_info(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: GetCharactersCharacterIdFleetOk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'datasource', 'if_none_match', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_fleet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `character_id` when calling `get_characters_character_id_fleet`")  # noqa: E501

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `character_id` when calling `get_characters_character_id_fleet`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/characters/{character_id}/fleet/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCharactersCharacterIdFleetOk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fleets_fleet_id(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet information  # noqa: E501

        Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: GetFleetsFleetIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fleets_fleet_id_with_http_info(fleet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fleets_fleet_id_with_http_info(fleet_id, **kwargs)  # noqa: E501
            return data

    def get_fleets_fleet_id_with_http_info(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet information  # noqa: E501

        Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id_with_http_info(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: GetFleetsFleetIdOk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'if_none_match', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFleetsFleetIdOk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fleets_fleet_id_members(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet members  # noqa: E501

        Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id_members(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :param str token: Access token to use if unable to set a header
        :return: list[GetFleetsFleetIdMembers200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fleets_fleet_id_members_with_http_info(fleet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fleets_fleet_id_members_with_http_info(fleet_id, **kwargs)  # noqa: E501
            return data

    def get_fleets_fleet_id_members_with_http_info(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet members  # noqa: E501

        Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id_members_with_http_info(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :param str token: Access token to use if unable to set a header
        :return: list[GetFleetsFleetIdMembers200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'accept_language', 'datasource', 'if_none_match', 'language', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/members/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetFleetsFleetIdMembers200Ok]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fleets_fleet_id_wings(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet wings  # noqa: E501

        Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id_wings(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :param str token: Access token to use if unable to set a header
        :return: list[GetFleetsFleetIdWings200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)  # noqa: E501
            return data

    def get_fleets_fleet_id_wings_with_http_info(self, fleet_id, **kwargs):  # noqa: E501
        """Get fleet wings  # noqa: E501

        Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fleets_fleet_id_wings_with_http_info(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :param str token: Access token to use if unable to set a header
        :return: list[GetFleetsFleetIdWings200Ok]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'accept_language', 'datasource', 'if_none_match', 'language', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleets_fleet_id_wings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `get_fleets_fleet_id_wings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/wings/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetFleetsFleetIdWings200Ok]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_fleets_fleet_id_members(self, fleet_id, invitation, **kwargs):  # noqa: E501
        """Create fleet invitation  # noqa: E501

        Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_members(fleet_id, invitation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PostFleetsFleetIdMembersInvitation invitation: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, **kwargs)  # noqa: E501
        else:
            (data) = self.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, **kwargs)  # noqa: E501
            return data

    def post_fleets_fleet_id_members_with_http_info(self, fleet_id, invitation, **kwargs):  # noqa: E501
        """Create fleet invitation  # noqa: E501

        Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PostFleetsFleetIdMembersInvitation invitation: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'invitation', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_members`")  # noqa: E501
        # verify the required parameter 'invitation' is set
        if self.api_client.client_side_validation and ('invitation' not in params or
                                                       params['invitation'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `invitation` when calling `post_fleets_fleet_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation' in params:
            body_params = params['invitation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/members/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_fleets_fleet_id_wings(self, fleet_id, **kwargs):  # noqa: E501
        """Create fleet wing  # noqa: E501

        Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_wings(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: PostFleetsFleetIdWingsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_fleets_fleet_id_wings_with_http_info(fleet_id, **kwargs)  # noqa: E501
            return data

    def post_fleets_fleet_id_wings_with_http_info(self, fleet_id, **kwargs):  # noqa: E501
        """Create fleet wing  # noqa: E501

        Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_wings_with_http_info(fleet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: PostFleetsFleetIdWingsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_wings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_wings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/wings/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostFleetsFleetIdWingsCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_fleets_fleet_id_wings_wing_id_squads(self, fleet_id, wing_id, **kwargs):  # noqa: E501
        """Create fleet squad  # noqa: E501

        Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_wings_wing_id_squads(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing_id to create squad in (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: PostFleetsFleetIdWingsWingIdSquadsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, **kwargs)  # noqa: E501
            return data

    def post_fleets_fleet_id_wings_wing_id_squads_with_http_info(self, fleet_id, wing_id, **kwargs):  # noqa: E501
        """Create fleet squad  # noqa: E501

        Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int wing_id: The wing_id to create squad in (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: PostFleetsFleetIdWingsWingIdSquadsCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'wing_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_fleets_fleet_id_wings_wing_id_squads" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `post_fleets_fleet_id_wings_wing_id_squads`")  # noqa: E501
        # verify the required parameter 'wing_id' is set
        if self.api_client.client_side_validation and ('wing_id' not in params or
                                                       params['wing_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wing_id` when calling `post_fleets_fleet_id_wings_wing_id_squads`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/wings/{wing_id}/squads/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostFleetsFleetIdWingsWingIdSquadsCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_fleets_fleet_id(self, fleet_id, new_settings, **kwargs):  # noqa: E501
        """Update fleet  # noqa: E501

        Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id(fleet_id, new_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdNewSettings new_settings: What to update for this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, **kwargs)  # noqa: E501
            return data

    def put_fleets_fleet_id_with_http_info(self, fleet_id, new_settings, **kwargs):  # noqa: E501
        """Update fleet  # noqa: E501

        Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_with_http_info(fleet_id, new_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdNewSettings new_settings: What to update for this fleet (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'new_settings', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id`")  # noqa: E501
        # verify the required parameter 'new_settings' is set
        if self.api_client.client_side_validation and ('new_settings' not in params or
                                                       params['new_settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_settings` when calling `put_fleets_fleet_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_settings' in params:
            body_params = params['new_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_fleets_fleet_id_members_member_id(self, fleet_id, member_id, movement, **kwargs):  # noqa: E501
        """Move fleet member  # noqa: E501

        Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_members_member_id(fleet_id, member_id, movement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param PutFleetsFleetIdMembersMemberIdMovement movement: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, **kwargs)  # noqa: E501
        else:
            (data) = self.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, **kwargs)  # noqa: E501
            return data

    def put_fleets_fleet_id_members_member_id_with_http_info(self, fleet_id, member_id, movement, **kwargs):  # noqa: E501
        """Move fleet member  # noqa: E501

        Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param int member_id: The character ID of a member in this fleet (required)
        :param PutFleetsFleetIdMembersMemberIdMovement movement: Details of the invitation (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'member_id', 'movement', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_members_member_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_members_member_id`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if self.api_client.client_side_validation and ('member_id' not in params or
                                                       params['member_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member_id` when calling `put_fleets_fleet_id_members_member_id`")  # noqa: E501
        # verify the required parameter 'movement' is set
        if self.api_client.client_side_validation and ('movement' not in params or
                                                       params['movement'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `movement` when calling `put_fleets_fleet_id_members_member_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'member_id' in params:
            path_params['member_id'] = params['member_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'movement' in params:
            body_params = params['movement']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/members/{member_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_fleets_fleet_id_squads_squad_id(self, fleet_id, naming, squad_id, **kwargs):  # noqa: E501
        """Rename fleet squad  # noqa: E501

        Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_squads_squad_id(fleet_id, naming, squad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdSquadsSquadIdNaming naming: New name of the squad (required)
        :param int squad_id: The squad to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, **kwargs)  # noqa: E501
            return data

    def put_fleets_fleet_id_squads_squad_id_with_http_info(self, fleet_id, naming, squad_id, **kwargs):  # noqa: E501
        """Rename fleet squad  # noqa: E501

        Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdSquadsSquadIdNaming naming: New name of the squad (required)
        :param int squad_id: The squad to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'naming', 'squad_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_squads_squad_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_squads_squad_id`")  # noqa: E501
        # verify the required parameter 'naming' is set
        if self.api_client.client_side_validation and ('naming' not in params or
                                                       params['naming'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `naming` when calling `put_fleets_fleet_id_squads_squad_id`")  # noqa: E501
        # verify the required parameter 'squad_id' is set
        if self.api_client.client_side_validation and ('squad_id' not in params or
                                                       params['squad_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `squad_id` when calling `put_fleets_fleet_id_squads_squad_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'squad_id' in params:
            path_params['squad_id'] = params['squad_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'naming' in params:
            body_params = params['naming']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/squads/{squad_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_fleets_fleet_id_wings_wing_id(self, fleet_id, naming, wing_id, **kwargs):  # noqa: E501
        """Rename fleet wing  # noqa: E501

        Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_wings_wing_id(fleet_id, naming, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdWingsWingIdNaming naming: New name of the wing (required)
        :param int wing_id: The wing to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, **kwargs)  # noqa: E501
            return data

    def put_fleets_fleet_id_wings_wing_id_with_http_info(self, fleet_id, naming, wing_id, **kwargs):  # noqa: E501
        """Rename fleet wing  # noqa: E501

        Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fleet_id: ID for a fleet (required)
        :param PutFleetsFleetIdWingsWingIdNaming naming: New name of the wing (required)
        :param int wing_id: The wing to rename (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fleet_id', 'naming', 'wing_id', 'datasource', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_fleets_fleet_id_wings_wing_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fleet_id' is set
        if self.api_client.client_side_validation and ('fleet_id' not in params or
                                                       params['fleet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fleet_id` when calling `put_fleets_fleet_id_wings_wing_id`")  # noqa: E501
        # verify the required parameter 'naming' is set
        if self.api_client.client_side_validation and ('naming' not in params or
                                                       params['naming'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `naming` when calling `put_fleets_fleet_id_wings_wing_id`")  # noqa: E501
        # verify the required parameter 'wing_id' is set
        if self.api_client.client_side_validation and ('wing_id' not in params or
                                                       params['wing_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `wing_id` when calling `put_fleets_fleet_id_wings_wing_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fleet_id' in params:
            path_params['fleet_id'] = params['fleet_id']  # noqa: E501
        if 'wing_id' in params:
            path_params['wing_id'] = params['wing_id']  # noqa: E501

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'naming' in params:
            body_params = params['naming']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['evesso']  # noqa: E501

        return self.api_client.call_api(
            '/fleets/{fleet_id}/wings/{wing_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
